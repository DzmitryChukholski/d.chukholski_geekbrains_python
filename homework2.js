// 1. Дан код:
// var a = 1, b = 1, c, d;
// c = ++a; alert(c);           // 2                a = a + 1 затем c = a
// d = b++; alert(d);           // 1                d = b затем b = b + 1
// c = (2+ ++a); alert(c);      // 5                a = a + 1 затем c = 2 + a
// d = (2+ b++); alert(d);      // 4                d = 2 + b + 1 затем b = b + 1
// alert(a);                    // 3
// alert(b);                    // 3
// Почему код даёт именно такие результаты?


// 2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2);
//X = 5


// 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
// если a и b положительные, вывести их разность;
// если а и b отрицательные, вывести их произведение;
// если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом. ### 
var a = 3, b = 5;
if (a >= 0 && b >= 0) {
    alert(a - b)
}
if (a <= 0 && b <= 0) {
    alert(a * b)
}
if ((a >= 0 && b < 0) || (a < 0 && b >= 0)) {
    alert(a + b)
}


// 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15. ### 

// В условии задачи явная ошибка. Цель "организовать вывод чисел от a до 15" подразумевает что если а=7, то необходимо вывести
// ряд чисел "7, 8, 9, 10, 11, 12, 13, 14, 15". Это можно сделать с помощью FOR или если хочется прикольнуться, то рекурсией,
// но использовать для этого дела switch это откровенно бредово.......


a = 7
switch (a) {
    case 1:
        alert('1');
        ++a
    case 2:
        alert('2');
        ++a
    case 3:
        alert('3');
        ++a
    case 4:
        alert('4');
        ++a
    case 5:
        alert('5');
        ++a
    case 6:
        alert('6');
        ++a
    case 7:
        alert('7');
        ++a
    case 8:
        alert('8');
        ++a
    case 9:
        alert('9');
        ++a
    case 10:
        alert('10');
        ++a
    case 11:
        alert('11');
        ++a
    case 12:
        alert('12');
        ++a
    case 13:
        alert('13');
        ++a
    case 14:
        alert('14');
        ++a
    case 15:
        alert('15');
}


// 5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return. 
function sum(a, b) {
    return a + b;
}

function raz(a, b) {
    return a - b;
}

function mult(a, b) {
    return a * b;
}

function div(a, b) {
    return a / b;
}


// 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), 
// где arg1, arg2 – значения аргументов, operation – строка с названием операции. 
// В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) 
// и вернуть полученное значение (использовать switch).
function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case 'сумма':
            return sum(arg1, arg2)
            break;
        case 'разность':
            return raz(arg1, arg2)
            break;
        case 'произведение':
            return mult(arg1, arg2)
            break;
        case 'частное':
            return div(arg1, arg2)
            break;
    }
}


// 7. *Сравнить null и 0. Попробуйте объяснить результат. 
// null > 0  // false
// null < 0  // false
// null == 0 // false
// null >= 0 // true
// null <= 0 // true
// False потому что null это число не число, он не может быть равен конкретным числам. Из того что я прочитал True возникает ввиду особенностей работы под капотом, цитата:
// "Причина в том, что нестрогое равенство и сравнения > < >= <= работают по-разному. 
// Сравнения преобразуют null в число, рассматривая его как 0. Поэтому выражение null >= 0 истинно, а null > 0 ложно."


// 8. *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.
function power(val, pow) {
    if (pow == 1) {
        return val;
    } else {
        return val * power(val, --pow);
    }
}